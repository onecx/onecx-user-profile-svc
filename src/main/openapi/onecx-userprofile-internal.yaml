---
openapi: 3.0.3
info:
  title: onecx-user-profile internal service
  description: This API provides endpoints to manage User Profiles and Account Settings as an user and as an admin
  version: 1.0.0
servers:
  - url: "http://onecx-user-profile:8080"
tags:
  - name: userProfileAdmin
    description: Managing User Profiles and Account Settings as an admin
  - name: userProfile
    description: Managing User Profile and Account Settings as an user
paths:
  /internal/userProfiles:
    post:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfileAdmin
      description: Create a new user profile
      operationId: createUserProfileData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserProfileRequest'
      responses:
        "201":
          description: User profile created successfully
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfiles/search:
    post:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfileAdmin
      description: Search for user profiles by search criteria
      operationId: searchUserProfileData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPersonCriteria'
      responses:
        "200":
          description: User profile search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfilePageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfiles/{id}:
    get:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfileAdmin
      description: Return a user profile by its id
      operationId: getUserProfileData
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "404":
          description: User profile not found
    put:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfileAdmin
      description: Update a user profile by its id
      operationId: updateUserProfileData
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPersonRequest'
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: User profile not found
    delete:
      security:
        - oauth2: [ ocx-up:all, ocx-up:delete ]
      tags:
        - userProfileAdmin
      description: Delete a user profile by its id
      operationId: deleteUserProfileData
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "204":
          description: User profile deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfile/me:
    get:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfile
      description: Load the user profile for the requesting user
      operationId: getMyUserProfile
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    delete:
      security:
        - oauth2: [ ocx-up:all, ocx-up:delete ]
      tags:
        - userProfile
      description: Delete the user profile for the requesting user
      operationId: deleteMyUserProfile
      responses:
        "204":
          description: User profile deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfile/me/preferences:
    get:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfile
      description: Load user preferences for the requesting user
      operationId: getUserProfilePreference
      responses:
        "200":
          description: User preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreferences'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    post:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfile
      description: Create user preference for the requesting user
      operationId: createUserProfilePreference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPreference'
      responses:
        "201":
          description: User preference created successfully
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreference'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfile/me/preferences/{id}:
    patch:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfile
      description: Update a user preference value by its id for the requesting user
      operationId: updateUserProfilePreference
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: User preference updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPreference'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: User preference not found
    delete:
      security:
        - oauth2: [ ocx-up:all, ocx-up:delete ]
      tags:
        - userProfile
      description: Delete a preference by its id for the requesting user
      operationId: deleteUserProfilePreference
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        "204":
          description: User preference deleted successfully
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfile/me/person:
    get:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfile
      description: Load user person for the requesting user
      operationId: getUserProfilePerson
      responses:
        "200":
          description: User person retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPerson'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfile
      description: Update user information of the requesting user
      operationId: updateUserProfilePerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPersonRequest'
      responses:
        "200":
          description: User information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPerson'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/userProfile/me/settings:
    get:
      security:
        - oauth2: [ ocx-up:all, ocx-up:read ]
      tags:
        - userProfile
      description: Load user profile account settings of the requesting user
      operationId: getUserProfileSettings
      responses:
        "200":
          description: User profile account settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileAccountSettings'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
    put:
      security:
        - oauth2: [ ocx-up:all, ocx-up:write ]
      tags:
        - userProfile
      description: Update user account settings of the requesting user
      operationId: updateUserProfileSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSettings'
      responses:
        "200":
          description: User profile account settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileAccountSettings'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth.simple.api/token
          scopes:
            ocx-up:all: Grants access to all operations
            ocx-up:read: Grants read access
            ocx-up:write: Grants write access
            ocx-up:delete: Grants access to delete operations
  schemas:
    UserPersonCriteria:
      type: object
      properties:
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    UserProfilePageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
    CreateUserProfileRequest:
      type: object
      properties:
        userId:
          type: string
        identityProvider:
          type: string
        identityProviderId:
          type: string
        organization:
          type: string
        person:
          $ref: '#/components/schemas/CreateUserPerson'
    CreateUserPerson:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
    UpdateUserPersonRequest:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/UserPersonAddress'
        phone:
          $ref: '#/components/schemas/UserPersonPhone'
    UserProfile:
      type: object
      properties:
        id:
          type: string
        modificationCount:
          format: int32
          type: integer
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        userId:
          type: string
        tenantId:
          type: string
        identityProvider:
          type: string
        identityProviderId:
          type: string
        issuer:
          type: string
        organization:
          type: string
        person:
          $ref: '#/components/schemas/UserPerson'
        accountSettings:
          $ref: '#/components/schemas/UserProfileAccountSettings'
        settings:
          type: object
    UserPerson:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/UserPersonAddress'
        phone:
          $ref: '#/components/schemas/UserPersonPhone'
    UserPersonAddress:
      type: object
      properties:
        street:
          type: string
        streetNo:
          type: string
        city:
          type: string
        country:
          type: string
        postalCode:
          type: string
    UserPersonPhone:
      type: object
      properties:
        number:
          type: string
        type:
          $ref: '#/components/schemas/PhoneType'
    PhoneType:
      enum:
        - MOBILE
        - LANDLINE
      type: string
    UserProfileAccountSettings:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        hideMyProfile:
          type: boolean
        locale:
          type: string
        timezone:
          type: string
        menuMode:
          $ref: '#/components/schemas/MenuMode'
        colorScheme:
          $ref: '#/components/schemas/ColorScheme'
    MenuMode:
      enum:
        - STATIC
        - HORIZONTAL
        - OVERLAY
        - SLIM
        - SLIMPLUS
      type: string
    ColorScheme:
      enum:
        - AUTO
        - LIGHT
        - DARK
      type: string
    CreateUserPreference:
      type: object
      properties:
        applicationId:
          type: string
        name:
          type: string
        description:
          type: string
        value:
          type: string
    UserPreferences:
      type: object
      properties:
        preferences:
          items:
            $ref: '#/components/schemas/UserPreference'
    UserPreference:
      type: object
      properties:
        id:
          type: string
        applicationId:
          type: string
        name:
          type: string
        description:
          type: string
        value:
          type: string
    UpdateUserSettings:
      type: object
      properties:
        modificationCount:
          format: int32
          type: integer
        hideMyProfile:
          type: boolean
        locale:
          type: string
        timezone:
          type: string
        menuMode:
          $ref: '#/components/schemas/MenuMode'
        colorScheme:
          $ref: '#/components/schemas/ColorScheme'
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        type: string
